#!/usr/bin/env ruby

require "yaml"
require "fileutils"

# TODO: Load these from the BDSM ruby API

def log(message, file) ; %x{echo "#{@timestamp}:#{@application}:#{@environment}:#{message}" >> #{@log_path}/backup.#{file}.log} ; end
def fail(message)      ; log(message, :error) ; exit 1 ; end
def succeed(message)   ; log(message, :backup) ; exit 0 ; end

@trace = 1 if ENV["trace_flag"]

puts "Loading BDSM Database Backup Utility." if @trace
#
# Setup & Extract variables
#
@timestamp = Time.now.strftime("%Y-%m-%dT%H:%M:%S")
@log_path  = "#{ENV["HOME"]}/shared/backups/log"

FileUtils.mkdir_p(@log_path) unless File.exist?(@log_path)

@user = (ENV["USER"]|| %x{whoami}).strip
@application = ARGV.shift || ENV["project"]
@environment = ARGV.shift || ENV["environment"] || ENV["RAILS_ENV"] || ENV["MERB_ENV"] || ENV["RACK_ENV"] || "production"

fail("application must be specified as the first argument.")  if @application.nil? || @application.empty?

@target_path = "#{ENV["HOME"]}/shared/backups/#{@application}/#{@environment}"
@config      = YAML.load_file("#{ENV["HOME"]}/shared/config/database.yml")[@environment]
@adapter     = @config["adapter"].to_s.strip

fail("adapter not specified in shared/config/database.yml")  if @adapter.nil? || @adapter.empty?

@username = @config["username"] || @user
@username = @user if @username.nil? || @username.empty?

@database    = @config["database"].to_s.strip

fail("database not specified in shared/config/database.yml") if @database.nil? || @database.empty?

@password    = @config["password"].to_s.strip

fail("password: not specified in shared/config/database.yml") if @password.nil? || @password.empty?

@hostname    = @config["host"] || "localhost"
@port        = @config["port"] || "5432"

FileUtils.mkdir_p(@target_path) unless File.exist?(@target_path)

#
# Perform the backup
#
if @adapter == "mysql"

  @dump = %x{which mysqldump}.strip

  fail("mysqldump command not found") if @dump.empty?

  @flags = "--add-drop-table --complete-insert --default-character-set=utf8 --quote-names --extended-insert"
  @filename = "#{@database}%#{@timestamp}.mysql"
  @command = "#{@dump} #{@flags} --user=#{@username} -p#{@password} --quick #{@database} | bzip2 -c > #{@target_path}/#{@filename}.bz2"

elsif @adapter == "postgresql"

  @dump = %x{which pg_dump}.strip

  fail("pg_dump command not found") if @dump.empty?

  @flags = "-b -c -E UTF8 -O -x --no-password"
  @filename = "#{@database}%#{@timestamp}.psql"
  credentials = "#{@hostname}:#{@port}:#{@database}:#{@username}:#{@password}"

  # Only write credentials if they are not already in the file.
  pgpass = File.open("#{ENV["HOME"]}/.pgpass", "w+")

  unless pgpass.read.match(credentials)
    pgpass.write credentials
    pgpass.chmod 0600
  end

  pgpass.close

  @command = "#{@dump} #{@flags} -U#{@username} -h #{@hostname} #{@database} | bzip2 -c - > #{@target_path}/#{@filename}.bz2"

else

  fail("unknown adapter, should be either mysql or postgresql")
  %x{rm -f ~/.pgpass}

end

puts "Executing: '#{@command}'" if @trace
system(@command)

$? == 0 ? succeed("backup successful") : fail("backup failed, command: #{@command}")
