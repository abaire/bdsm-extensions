#!/usr/bin/env bash

configure_database_yml()
{
  if [[ ! -s "$shared_path/config/database.yml" ]] ; then
    printf "\n${environment}: &defaults\n  adapter: ${database:-postgresql}\n  username: $project\n  password: '$project'\n  database: ${project}_${environment}\n  pool: 5\n  timeout: 5000\n" > "$shared_path/config/database.yml"
    if [[ "$database" = "mysql" ]] ; then
      printf "\n  socket: ${socket:-/tmp/mysql.sock}\n  encoding: utf8\n" >> "$shared_path/config/database.yml"
    fi
  fi

  if variable_is_nonempty database && command_exists gem ; then
    case "$database" in
      postgresql)
        install_gems pg
        if [[ "$?" -ne 0 ]] ; then
          pg_config=$(command -v pg_config)
          install_gem pg -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
          # gem install pg --no-rdoc --no-ri -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
        fi
        ;;

      mysql)
        install_gems mysql
        if [[ "$?" -ne 0 ]] ; then
          mysql_config=$(command -v mysql_config)
          install_gem mysql -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
          #gem install mysql --no-rdoc --no-ri -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
        fi
        ;;

      mongodb)
        install_gems mongomapper
        ;;

      sqlite*|*)
        install_gems sqlite
        ;;
    esac
  fi
}

configure_profiles()
{
  # Ensure the .bdsmrc file and the profiles are setup properly.
  file_contains "$HOME/.bashrc" '\.bdsmrc' ||
    echo '[[ -s "$HOME/.bdsmrc" ]] && . "$HOME/.bdsmrc"' \
      >> "$HOME/.bashrc"

  file_contains "$HOME/.bash_profile" '\.bashrc' ||
    echo '[[ "-s $HOME/.bashrc" ]] && . "$HOME/.bashrc"' \
      >> "$HOME/.bash_profile"

  file_contains "$HOME/.bash_profile" '\.rvmrc' ||
    echo '[[ -s "$HOME/current/.rvmrc" ]] && . "$HOME/current/.rvmrc"' \
      >> "$HOME/.bash_profile"
}

configure_bdsmrc()
{
  variable_is_nonempty project ||
    fail "project variable must be set for extension $extension."

  file_contains "$HOME/.bdsmrc" 'project=' ||
    echo "\nexport project=\"${project:-$user}\"" >> $HOME/.bdsmrc

  variable_is_nonempty environment ||
    fail "environment variable must be set for extension $extension."

  file_contains "$HOME/.bdsmrc" 'environment=' ||
    echo "\nexport environment=\"$environment\"" >> $HOME/.bdsmrc

  file_contains "$HOME/.bdsmrc" 'RAILS_ENV=' ||
    echo "\nexport RAILS_ENV=\"$environment\"" >> $HOME/.bdsmrc

  if variable_is_nonempty repository_url ; then
    file_contains "$HOME/.bdsmrc" "repository_url=" ||
      echo "\nexport repository_url=\"$repository_url\"" >> $HOME/.bdsmrc
  fi

  if variable_is_nonempty database ; then
    file_contains "$HOME/.bdsmrc" 'database=' ||
      echo "export database=\"${database}\"" >> $HOME/.bdsmrc
  fi

}

fetch_repository()
{
  if [[ "$scm" = "git" ]] || (echo "$repository_url" | awk "/git/" 2>/dev/null) ; then
    directory_exists "$shared_path/$project/.git" ||
      git clone $repository_url $project
  elif [[ "$scm" = "svn" ]] || (echo "$repository_url" | awk "/svn/" 2>/dev/null) ; then
    directory_exists "$shared_path/$project/.svn" ||
      svn checkout $repository_url $project
  elif [[ "$scm" = "hg" ]] || (echo "$repository_url" | awk "/hg/" 2>/dev/null) ; then
    directory_exists "$shared_path/$project/.hg"
      hg clone $repository_url $project
  else
    fail "repository_url type not known, expecting {git,svn,hg} in the repository_url url."
  fi
}

setup_shared_path()
{
  (
  enter "$shared_path"
  ensure_paths_exist config log pids sockets "public/assets" tmp
  )
}

configure_rvm()
{
  if file_is_empty_or_missing "${HOME}/.rvm/scripts/rvm" ; then
    file_contains "$HOME/.rvmrc" 'rvm_path=' ||
      echo "export rvm_path=\"$HOME/.rvm\"" >> "$HOME/.rvmrc"

    file_contains "$HOME/.rvmrc" 'rvm_install_on_use_flag' ||
      echo 'export rvm_install_on_use_flag=1' >> "$HOME/.rvmrc"

    . "$HOME/.rvmrc"

    rvm_install
  fi

  if file_is_nonempty "$shared_path/$project/.rvmrc" ; then
    . "$HOME/.rvmrc"
    . "$shared_path/$project/.rvmrc"
  fi
}

setup_application_server()
{
  case "${server:-}" in
    unicorn)
      # TODO: Extension check
      extension_action unicorn setup
      ;;
    mongrel2)
      extension_action mongrel2 setup
      ;;
    thin)
      extension_action thin setup
      ;;
    passenger) # Standalone
      extension_action passenger setup
      ;;
    *)
      # Default to Unicorn
      extension_action unicorn setup
      ;;
  esac
}
