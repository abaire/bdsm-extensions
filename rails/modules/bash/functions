#!/usr/bin/env bash

configure_database_yml()
{
  if [[ ! -s "$project_path/shared/config/database.yml" ]] ; then
    printf "\n${environment}: &defaults\n  adapter: ${database:-postgresql}\n  username: $project\n  password: '$project'\n  database: ${project}_${environment}\n  pool: 5\n  timeout: 5000\n" > "$shared_path/config/database.yml"
    if [[ "$database" = "mysql" ]] ; then
      printf "\n  socket: ${socket:-/tmp/mysql.sock}\n  encoding: utf8\n" >> "$shared_path/config/database.yml"
    fi
  fi

  if [[ -n "$database" ]] && command -v gem > /dev/null; then
    if [[ "postgresql" = "$database" ]] ; then
      gem install pg --no-rdoc --no-ri
      if [[ "$?" -ne 0 ]] ; then
        pg_config=$(command -v pg_config)
        gem install pg --no-rdoc --no-ri -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
      fi
    elif [[ "mysql" = "$database" ]] ; then
      gem install mysql --no-rdoc --no-ri
      if [[ "$?" -ne 0 ]] ; then
        mysql_config=$(command -v mysql_config)
        gem install mysql --no-rdoc --no-ri -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
      fi
    else
      gem install sqlite --no-rdoc --no-ri
    fi
  fi
}

configure_profiles()
{
  # Ensure the .bdsmrc file and the profiles are setup properly.
  if ! awk '/\.bdsmrc/' "$HOME/.bash_profile" ; then
    echo '[[ -s "$HOME/.bdsmrc" ]] && . "$HOME/.bdsmrc"' \
      >> "$HOME/.bash_profile"
  fi

  if ! awk '/\.bashrc/' "$HOME/.bash_profile" ; then
    echo '[[ "-s $HOME/.bashrc" ]] && . "$HOME/.bashrc"' \
      >> "$HOME/.bash_profile"
  fi

  if ! awk '/current\/\.rvmrc/' "$HOME/.bash_profile" ; then
    echo '[[ -s "$HOME/current/.rvmrc" ]] && . "$HOME/current/.rvmrc"' \
      >> "$HOME/.bash_profile"
  fi
}

configure_bdsmrc()
{
  [[ -n "$project" ]] || \
    fail "project variable must be set for extension $extension."

  if ! awk "/project=/" "$HOME/.bdsmrc" ; then
    printf "\nexport project=\"${project:-$user}\"\n" >> $HOME/.bdsmrc
  fi

  [[ -n "$environment" ]] || \
    fail "environment variable must be set for extension $extension."

  if ! awk "/environment=/" "$HOME/.bdsmrc" ; then
    printf "\nexport environment=\"$environment\"\n" >> $HOME/.bdsmrc
  fi

  if ! awk "/RAILS_ENV=/" "$HOME/.bdsmrc" ; then
    printf "\nexport RAILS_ENV=\"$environment\"\n" >> $HOME/.bdsmrc
  fi

  if [[ -n "$repository_url" ]] ; then
    if ! awk "/repository_url=/" "$HOME/.bdsmrc" ; then
      printf "\nexport repository_url=\"$repository_url\"\n" >> $HOME/.bdsmrc
    fi
  fi

  if [[ -n "$database" ]] ; then
    if ! awk "/database=/" "$HOME/.bdsmrc" ; then
      echo "export database=\"production\"" >> $HOME/.bdsmrc
    fi
  fi

}

fetch_repository_url()
{
  if [[ "$scm" = "git" ]] || (echo $repository_url | awk "/git/") ; then
    if [[ ! -d "$shared_path/$project/.git" ]] ; then
      git clone $repository_url $project
    fi
  elif [[ "$scm" = "svn" ]] || (echo $repository_url | awk "/svn/") ; then
    if [[ ! -d "$shared_path/$project/.svn" ]] ; then
      svn checkout $repository_url $project
    fi
  elif [[ "$scm" = "hg" ]] || (echo $repository_url | awk "/hg/") ; then
    if [[ ! -d "$shared_path/$project/.hg" ]] ; then
      hg clone $repository_url $project
    fi
  else
    echo -e "ERROR: repository_url type not known, expecting {git,svn,hg} in the repository_url url."
  fi
}

setup_shared_path()
{
  (
  enter "$shared_path"
  ensure_paths_exist config log pids sockets "public/assets" tmp
  )
}

configure_rvm()
{
  # TODO: Add this into the rvm module.
  if [[ ! -s "$HOME/.rvm/scripts/rvm" ]] ; then
    mkdir -p $HOME/.rvm/src ; cd $HOME/.rvm/src
    if [[ -d rvm/.git ]] ; then
      cd rvm
      git reset --hard HEAD
      git pull origin "${rvm_branch:-master}"
      ./install
    else
      git clone git://github.com/wayneeseguin/rvm.git
      cd rvm
      ./install
    fi

    enter $HOME
  fi

  if [[ -d "$shared_path/$project/" && -s "$shared_path/$project/.rvmrc" ]] ; then
    export rvm_install_on_use_flag=1
    . "$shared_path/$project/.rvmrc"
  fi
}
