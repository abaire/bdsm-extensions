#!/usr/bin/env bash

modules "trace" "project" "rvm" # Load the project module

source_files "$HOME/.bashrc" "/etc/bdsmrc" "$HOME/.bdsmrc"

ensure_set "environment" "RAILS_ENV" "project"

# Fetch the pid_file pid.
pid_file="$shared_path/pids/$project.pid"

if [[ -d "$shared_path/pids" && -s "$pid_file" ]] ; then
  pid_file_pid=$(cat "$pid_file")
else
  pid_file_pid=0
fi

# Fetch the running pid.
if [[ -n "${project:-}" ]] ; then
  running_pid=$(
  ps auxww | awk "/[u]nicorn master/ && ! /(old)/ && /${project}/ {print \$2}"
  )

  old_pid=$(
  ps auxww | awk "/[u]nicorn master/ && /(old)/ && /${project}/ {print \$2}"
  )
else
  running_pid=$(
  ps auxww | awk "/[u]nicorn master/ && ! /(old)/ && /${USER}/ {print \$2}"
  )
  old_pid=$(
  ps auxww | awk "/[u]nicorn master/ && /(old)/ && /${USER}/ {print \$2}"
  )

  log "WARNING: 'project' should be set in ~/.bdsmrc"
fi

if [[ ${running_pid:-0} -gt 0 && -d "/proc/${running_pid}" ]] ; then
  printf ${running_pid} > "$pid_file" # Make sure the correct running pid is in the pid_file.
  master_pid=${running_pid} # Set to the found running pid_file.
elif [[ ${pid_file_pid:-0} -gt 0 && -d "/proc/${pid_file_pid}" ]] ; then
  master_pid=${pid_file_pid} # Running and matches pid_file.
else
  master_pid=0 # Not found!
fi

enter "$release_path"

# Since enter will not trigger project rvmrc files,
source_files \
  "$release_path/.rvmrc" \
  "$HOME/.rvm/hooks/after_cd"

